var documenterSearchIndex = {"docs":
[{"location":"apireference/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"apireference/#Core-types","page":"API Reference","title":"Core types","text":"","category":"section"},{"location":"apireference/","page":"API Reference","title":"API Reference","text":"ADDM.Trial\nADDM.aDDM\nADDM.define_model","category":"page"},{"location":"apireference/#ADDM.Trial","page":"API Reference","title":"ADDM.Trial","text":"Trial(choice, RT, valueLeft, valueRight)\n\nArguments\n\nRequired keyword arguments\n\nchoice: either -1 (for left item) or +1 (for right item).\nRT: response time in milliseconds.\nvalueLeft: value of the left item.\nvalueRight: value of the right item.\n\nOptional\n\nRDV: vector of RDV over time.\nfixItem: list of items fixated during the trial in chronological   order; 1 correponds to left, 2 corresponds to right, and any   other value is considered a transition/blank fixation.\nfixTime: list of fixation durations (in milliseconds) in   chronological order.\nfixRDV: list of Float64 corresponding to the RDV values at the end of   each fixation in the trial.\nuninterruptedLastFixTime: Int64 corresponding to the duration, in   milliseconds, that the last fixation in the trial would have if it   had not been interrupted when a decision was made.\n\nExample\n\njulia> t = Trial(choice = 1, RT = 2145, valueLeft = 1, valueRight = 3)\nTrial(1, 2145, 1, 3, #undef, #undef, #undef, #undef, #undef)\n\njulia> t.RT\n2145\n\njulia> t.uninterruptedLastFixTime\nERROR: UndefRefError: access to undefined reference\nStacktrace:\n [1] getproperty(x::Trial, f::Symbol)\n   @ Base ./Base.jl:37\n [2] top-level scope\n   @ REPL[4]:1\n\njulia> t.uninterruptedLastFixTime = 189\n189\n\njulia> t\nTrial(1, 2145, 1, 3, #undef, #undef, #undef, 189, #undef)\n\n\n\n\n\n","category":"type"},{"location":"apireference/#ADDM.aDDM","page":"API Reference","title":"ADDM.aDDM","text":"Constructor for model definitions that will contain model parameter and parameter value   mapping. Not intended to be used alone but as part of define_model\n\nExample\n\njulia> MyModel = ADDM.aDDM()\naDDM(Dict{Symbol, Any}())\n\njulia> MyModel.d = 0.005\n0.005\n\njulia> MyModel.σ = .06\n0.06\n\njulia> MyModel\naDDM(Dict{Symbol, Any}(:σ => 0.06, :d => 0.005))\n\n\n\n\n\n","category":"type"},{"location":"apireference/#ADDM.define_model","page":"API Reference","title":"ADDM.define_model","text":"define_model(d, σ, θ = 1, η = 0, barrier = 1, decay = 0, nonDecisionTime = 0, bias = 0.0)\n\nCreate attentional drift diffusion model with parameters described in    Krajbich et al. (2010).\n\nArguments\n\nRequired parameters\n\nd: Number, parameter of the model which controls the speed of   integration of the signal.\nσ: Number, parameter of the model, standard deviation for the   normal distribution.\n\nOptional parameters\n\nθ: Float64 Traditionally between 0 and 1, parameter of the model which controls   the attentional discounting. Default at 1 makes it a ddm.\nη: Float64 Additive attentional enhancement the attentional discounting.    Default at 0 makes it a ddm.\nbarrier: positive Int64, boundary separation in each direction from 0. Default at 1.\ndecay: constant for linear barrier decay at each time step. Default at 0.\nnonDecisionTime: non-negative Number, the amount of time in   milliseconds during which processes other than evidence accummulation occurs.    Default at 0.\nbias: Number, corresponds to the initial value of the relative decision value   variable. Must be smaller than barrier.\n\nTodo\n\nTests\nChange decay parameter to function instead of scalar\n\nExample\n\njulia julia> MyModel = define_model(d = .006, σ = 0.05) aDDM(Dict{Symbol, Any}(:nonDecisionTime => 0, :σ => 0.05, :d => 0.006, :bias => 0.0, :barrier => 1, :decay => 0, :θ => 1.0, :η => 0.0))`\n\n\n\n\n\n","category":"function"},{"location":"apireference/#Fixation-data","page":"API Reference","title":"Fixation data","text":"","category":"section"},{"location":"apireference/","page":"API Reference","title":"API Reference","text":"ADDM.FixationData   \nADDM.process_fixations  \nADDM.convert_to_fixationDist  ","category":"page"},{"location":"apireference/#ADDM.FixationData","page":"API Reference","title":"ADDM.FixationData","text":"FixationData(probFixLeftFirst, latencies, transitions, fixations; \n             fixDistType=\"fixation\")\n\nArguments:\n\nprobFixLeftFirst: Float64 between 0 and 1, empirical probability that   the left item will be fixated first.\nlatencies: Vector corresponding to the empirical distribution of   trial latencies (delay before first fixation) in milliseconds.\ntransitions: Vector corresponding to the empirical distribution   of transitions (delays between item fixations) in milliseconds.\nfixations: Dict whose indexing is defined according to parameter   fixDistType. Each entry is an array corresponding to the   empirical distribution of item fixation durations in   milliseconds.\nfixDistType: String, one of {'simple', 'difficulty', 'fixation'},   determines how the fixation distributions are indexed. If   'simple', fixation distributions are indexed only by type (1st,   2nd, etc). If 'difficulty', they are indexed by type and by trial   difficulty, i.e., the absolute value for the trial's value   difference. If 'fixation', they are indexed by type and by the   value difference between the fixated and unfixated items.\n\n\n\n\n\n","category":"type"},{"location":"apireference/#ADDM.process_fixations","page":"API Reference","title":"ADDM.process_fixations","text":"process_fixations(data::Dict; timeStep::Number = 10, \n                                 maxFixTime::Number = 3000, \n                                 numFixDists::Int64 = 3, fixDistType::String = \"fixation\", \n                                 valueDiffs::Vector{Int64} = collect(-3:1:3), \n                                 subjectIds::Vector{String} = String[])\n\nCreate empirical distributions from the data to be used when generating model simulations.\n\nArguments\n\ndata: a dict, indexed by subjectId, where each entry is a list of   Trial objects. E.g. output of load_data_from_csv\ntimeStep: integer, minimum duration of a fixation to be considered, in   miliseconds.\nmaxFixTime: integer, maximum duration of a fixation to be considered, in   miliseconds.\nnumFixDists: integer, number of fixation types to use in the fixation   distributions. For instance, if numFixDists equals 3, then 3 separate   fixation types will be used, corresponding to the 1st, 2nd and other   (3rd and up) fixations in each trial.\nfixDistType: string, one of {'simple', 'difficulty', 'fixation'}, used to   determine how the fixation distributions should be indexed. If   'simple', then fixation distributions will be indexed only by type   (1st, 2nd, etc). If 'difficulty', they will be indexed by type and by   trial difficulty, i.e., the absolute value for the trial's value   difference. If 'fixation', they will be indexed by type and by the   value difference between the fixated and unfixated items.\nvalueDiffs: list of integers. If fixDistType is 'difficulty' or   'fixation', valueDiffs is a range correspoding to the item values to   be used when indexing the fixation distributions.\nsubjectIds: list of strings corresponding to the subjects whose data   should be used. If not provided, all existing subjects will be used.\n\nReturn\n\nA FixationData object.\n\n\n\n\n\n","category":"function"},{"location":"apireference/#ADDM.convert_to_fixationDist","page":"API Reference","title":"ADDM.convert_to_fixationDist","text":"convert_to_fixationDist(fixationData::FixationData; timeStep::Number = 10)\n\nCreate empirical distributions from the data to be used when generating model simulations.\n\nArguments\n\nfixationData: FixationData type that is the output of process_fixations.\ntimeStep: integer, timeBin size in ms.\n\nReturn\n\nfixationDist: Dictionary indexed by value difference and fixation type. Contains the distributions of fixation durations in each time bin specifiu\ntimeBinMidPoints: Mid points of the time bins, for which the fixation  duration distributions were calculated. Will be the durations sampled in  addm_simulate_trial if using fixationDist instead of fixationData\n\n\n\n\n\n","category":"function"},{"location":"apireference/#Data-simulation","page":"API Reference","title":"Data simulation","text":"","category":"section"},{"location":"apireference/","page":"API Reference","title":"API Reference","text":"ADDM.aDDM_simulate_trial\nADDM.DDM_simulate_trial\nADDM.simulate_data","category":"page"},{"location":"apireference/#ADDM.aDDM_simulate_trial","page":"API Reference","title":"ADDM.aDDM_simulate_trial","text":"aDDM_simulate_trial(model::aDDM, fixationData::FixationData, \n                    valueLeft::Number, valueRight::Number; timeStep::Number=10.0, \n                    numFixDists::Int64=3 , fixationDist=nothing, timeBins=nothing, \n                    cutOff::Number=100000)\n\nGenerate a DDM trial given the item values.\n\nArguments\n\nmodel: aDDM object.\nfixationData: FixationData object. Required even when using fixationDist because it specifies latencies and transitions as well.\nvalueLeft: value of the left item.\nvalueRight: value of the right item.\ntimeStep: Number, value in milliseconds to be used for binning   time axis.\nnumFixDists: Int64, number of fixation types to use in the fixation   distributions. For instance, if numFixDists equals 3, then 3   separate fixation types will be used, corresponding to the 1st,   2nd and other (3rd and up) fixations in each trial.\nfixationDist: distribution of fixations which, when provided, will be   used instead of fixationData.fixations. This should be a dict of   dicts of dicts, corresponding to the probability distributions of   fixation durations. Indexed first by fixation type (1st, 2nd, etc),   then by the value difference between the fixated and unfixated    items, then by time bin. Each entry is a number between 0 and 1    corresponding to the probability assigned to the particular time   bin (i.e. given a particular fixation type and value difference,   probabilities for all bins should add up to 1). Can be obtained from   fixationData using convert_to_fixationDist. If using this instead   of fixationData to sample fixations make sure to specify latency and    transition info in fixationData.\ntimeBins: array containing the time bins used in fixationDist. Can be   obtained fromfixationData using convert_to_fixationDist\n\nReturns\n\nAn Trial object resulting from the simulation.\n\n\n\n\n\n","category":"function"},{"location":"apireference/#ADDM.DDM_simulate_trial","page":"API Reference","title":"ADDM.DDM_simulate_trial","text":"DDM_simulate_trial(model::aDDM, valueLeft::Number, valueRight::Number; timeStep::Number = 10.0, \n                   cutOff::Int64 = 20000)\n\nGenerate a DDM trial given the item values.\n\nArguments\n\nmodel: aDDM object.\nvalueLeft: value of the left item.\nvalueRight: value of the right item.\ntimeStep: Number, value in milliseconds to be used for binning the   time axis.\ncutOff: Number, value in milliseconds to be used as a cap if trial   response time is too long.\nReturns\nA Trial object resulting from the simulation.\n\n\n\n\n\n","category":"function"},{"location":"apireference/#ADDM.simulate_data","page":"API Reference","title":"ADDM.simulate_data","text":"simulate_data(model::aDDM, stimuli, simulator_fn, simulator_args = (timeStep = 10.0, cutOff = 20000))\n\nSimulate data using the model for the given stimuli.\n\nArguments\n\nmodel: aDDM object.\nstimuli: Named tuple with valueLeft and valueRight specifying the values of options.\nsimulator_fn: Name of the function that simulates a trial for the given model.\nsimulator_args: Named tuple containing kwargs that should be fed to simulator_fn\n\nReturns\n\nVector of Trial objects containing simulated data.\n\n\n\n\n\n","category":"function"},{"location":"apireference/#Likelihood-computation","page":"API Reference","title":"Likelihood computation","text":"","category":"section"},{"location":"apireference/","page":"API Reference","title":"API Reference","text":"ADDM.aDDM_get_trial_likelihood\nADDM.DDM_get_trial_likelihood\nADDM.compute_trials_nll","category":"page"},{"location":"apireference/#ADDM.aDDM_get_trial_likelihood","page":"API Reference","title":"ADDM.aDDM_get_trial_likelihood","text":"aDDM_get_trial_likelihood(addm::aDDM, trial::aDDMTrial; timeStep::Number = 10.0, \n                          approxStateStep::Number = 0.1)\n\nCompute the likelihood of the data from a single aDDM trial for these particular aDDM    parameters.\n\nArguments:\n\nmodel: aDDM object.\ntrial: Trial object.\ntimeStep: Number, value in milliseconds to be used for binning the   time axis.\napproxStateStep: Number, to be used for binning the RDV axis.\n\nReturns:\n\nThe likelihood obtained for the given trial and model.\n\n\n\n\n\n","category":"function"},{"location":"apireference/#ADDM.DDM_get_trial_likelihood","page":"API Reference","title":"ADDM.DDM_get_trial_likelihood","text":"DDM_get_trial_likelihood(ddm::aDDM, trial::Trial; timeStep::Number = 10, \n                         approxStateStep::Number = 0.1, \n                         decay::Number = 0)\n\nCompute the likelihood of the data from a single DDM trial for these particular DDM parameters.\n\nArguments\n\nmodel: aDDM object.\ntrial: Trial object.\ntimeStep: Number, value in milliseconds to be used for binning the   time axis.\napproxStateStep: Number, to be used for binning the RDV axis.\n\nReturns\n\nThe likelihood obtained for the given trial and model.\n\n\n\n\n\n","category":"function"},{"location":"apireference/#ADDM.compute_trials_nll","page":"API Reference","title":"ADDM.compute_trials_nll","text":"compute_trials_nll(model::aDDM, data, likelihood_fn, likelihood_args = (timeStep = 10.0, cutOff = 20000))\n\nCompute likelihood of a dataset for a given model.\n\nArguments\n\nmodel: aDDM object.\ndata: Vector of ADDM.Trial objects. \nlikelihood_fn: Name of the function that computes the likelhoods of a trial for the given model.\nlikelihood_args: Named tuple containing kwargs that should be fed to likelihood_fn\nreturn_trial_likelihoods: Boolean to specify whether to return the likelihoods for each trial\n\nReturns\n\nNegative log likelihood of data\n\n\n\n\n\n","category":"function"},{"location":"apireference/#Grid-search","page":"API Reference","title":"Grid search","text":"","category":"section"},{"location":"apireference/","page":"API Reference","title":"API Reference","text":"ADDM.grid_search","category":"page"},{"location":"apireference/#ADDM.grid_search","page":"API Reference","title":"ADDM.grid_search","text":"grid_search(data, param_grid, likelihood_fn, return_grid_likelihoods = false; \n            likelihood_args =  (timeStep = 10.0, approxStateStep = 0.1), return_trial_likelihoods = false)\n\nCompute the likelihood of either observed or simulated data for all parameter combinations in paramGrid.\n\nArguments\n\ndata: \n\nReturns:\n\n...\n\n\n\n\n\n","category":"function"},{"location":"apireference/#Helpers","page":"API Reference","title":"Helpers","text":"","category":"section"},{"location":"apireference/","page":"API Reference","title":"API Reference","text":"ADDM.load_data_from_csv\nADDM.convert_param_symbols","category":"page"},{"location":"apireference/#ADDM.load_data_from_csv","page":"API Reference","title":"ADDM.load_data_from_csv","text":"load_data_from_csv(expdataFileName, fixationsFileName; convertItemValues=nothing)\n\nLoad experimental data from two CSV files: an experimental data file and a fixations file. Format expected for experimental data file: parcode, trial, rt, choice, itemleft, itemright. Format expected for fixations file: parcode, trial, fixitem, fixtime.\n\nArguments\n\nexpdataFileName: String, name of experimental data file.\nfixationsFileName: String, name of fixations file.\nparcode: Subject identifier\ntrial: Trial number\nfix_item: Fixation location. 0 = transition, 1 = left, 2 = right,\n3 = latency.\nfix_time: Fixation duration.\n\nReturn\n\nA dict, indexed by subjectId, where each entry is a list of Trial       objects.\n\n\n\n\n\n","category":"function"},{"location":"apireference/#ADDM.convert_param_symbols","page":"API Reference","title":"ADDM.convert_param_symbols","text":"convert_param_symbols(model)\n\nConvert parameter names that are specified in text into greek/latex symbols. Used by ADDM.grid_search\n\n\n\n\n\n","category":"function"},{"location":"tutorials/getting_started/#Getting-started-with-ADDM.jl","page":"Getting started with ADDM.jl","title":"Getting started with ADDM.jl","text":"","category":"section"},{"location":"tutorials/getting_started/#Load-package","page":"Getting started with ADDM.jl","title":"Load package","text":"","category":"section"},{"location":"tutorials/getting_started/","page":"Getting started with ADDM.jl","title":"Getting started with ADDM.jl","text":"using ADDM","category":"page"},{"location":"tutorials/getting_started/#Parameter-recovery-on-simulated-data","page":"Getting started with ADDM.jl","title":"Parameter recovery on simulated data","text":"","category":"section"},{"location":"tutorials/getting_started/#Define-model","page":"Getting started with ADDM.jl","title":"Define model","text":"","category":"section"},{"location":"tutorials/getting_started/","page":"Getting started with ADDM.jl","title":"Getting started with ADDM.jl","text":"MyModel = ADDM.define_model(d = 0.007, σ = 0.03, θ = .6, barrier = 1, \n                decay = 0, nonDecisionTime = 100, bias = 0.0)","category":"page"},{"location":"tutorials/getting_started/#Define-stimuli","page":"Getting started with ADDM.jl","title":"Define stimuli","text":"","category":"section"},{"location":"tutorials/getting_started/","page":"Getting started with ADDM.jl","title":"Getting started with ADDM.jl","text":"This should be of type NamedTuple with required field names (case sensitive): valueLeft and valueRight ","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with ADDM.jl","title":"Getting started with ADDM.jl","text":"Option 1: Read in from CSV  ","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with ADDM.jl","title":"Getting started with ADDM.jl","text":"Note that the CSV and DataFrames modules must be loaded beforehand. These are dependencies for the ADDM module but the precompiled module gives access to these dependencies only in the scope of ADDM. In other words, ADDM.load_data_from_csv that requires both of these packages would still work but the code below would not without importing these modules to the current interactive scope","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with ADDM.jl","title":"Getting started with ADDM.jl","text":"using CSV\nusing DataFrames\n\nfn = \"./data/stims.csv\"\ntmp = DataFrame(CSV.File(fn, delim=\",\"))\nMyStims = (valueLeft = tmp.valueLeft, valueRight = tmp.valueRight)","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with ADDM.jl","title":"Getting started with ADDM.jl","text":"Option 2: Create random stimuli","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with ADDM.jl","title":"Getting started with ADDM.jl","text":"Note that if you're going to create random stimuli you should make sure to have value differences that correspond to what you plan to fit in for fixation data","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with ADDM.jl","title":"Getting started with ADDM.jl","text":"Random.seed!(38535)\nMyStims = (valueLeft = randn(1000), valueRight = randn(1000))","category":"page"},{"location":"tutorials/getting_started/#Define-fixationData","page":"Getting started with ADDM.jl","title":"Define fixationData","text":"","category":"section"},{"location":"tutorials/getting_started/","page":"Getting started with ADDM.jl","title":"Getting started with ADDM.jl","text":"Fixation information that will be fed in to the model for simulations should be of type FixationData. This type organizes empirical fixations to distributions conditional on fixation type (first, second etc.) and value difference.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with ADDM.jl","title":"Getting started with ADDM.jl","text":"This organizes both the behavioral and the fixation data as a dictionary of Trial objects indexed by subject","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with ADDM.jl","title":"Getting started with ADDM.jl","text":"data = ADDM.load_data_from_csv(\"./data/expdata.csv\", \"./data/fixations.csv\")","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with ADDM.jl","title":"Getting started with ADDM.jl","text":"Extract value difference information from the dataset to use in processing the fixations","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with ADDM.jl","title":"Getting started with ADDM.jl","text":"vDiffs = sort(unique([x.valueLeft - x.valueRight for x in data[\"1\"]]))","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with ADDM.jl","title":"Getting started with ADDM.jl","text":"When simulating an aDDM we need to input fixations. But instead of using the fixation data from any given subject we summarize the empricial data from all subjects as distributions from which the model samples from depending on the value difference and the fixation type (1st, 2nd etc.).","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with ADDM.jl","title":"Getting started with ADDM.jl","text":"MyFixationData = ADDM.process_fixations(data, fixDistType=\"fixation\", valueDiffs = vDiffs)","category":"page"},{"location":"tutorials/getting_started/#Simulate-data","page":"Getting started with ADDM.jl","title":"Simulate data","text":"","category":"section"},{"location":"tutorials/getting_started/","page":"Getting started with ADDM.jl","title":"Getting started with ADDM.jl","text":"Defining additional arguments for aDDM trial simulator (e.g. fixation data). Note this needs to me a NamedTuple, i.e. must have at least two elements Otherwise it tries to apply iterate to the single element which would likely end with a  MethodError. In this example I specify timeStep and cutoff in addition to the  only required argument without a default fixationData to avoid this.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with ADDM.jl","title":"Getting started with ADDM.jl","text":"MyArgs = (timeStep = 10.0, cutOff = 20000, fixationData = MyFixationData)","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with ADDM.jl","title":"Getting started with ADDM.jl","text":"Note that these are positional arguments for code efficiency","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with ADDM.jl","title":"Getting started with ADDM.jl","text":"SimData = ADDM.simulate_data(MyModel, MyStims, ADDM.aDDM_simulate_trial, MyArgs)","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with ADDM.jl","title":"Getting started with ADDM.jl","text":"Data can also be simulated from probability distributions of fixation data.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with ADDM.jl","title":"Getting started with ADDM.jl","text":"MyFixationDist, MyTimeBins = ADDM.convert_to_fixationDist(MyFixationData)\n\nMyBlankFixationData = ADDM.FixationData(MyFixationData.probFixLeftFirst, MyFixationData.latencies, MyFixationData.transitions, Dict())\n\nMyArgs = (fixationData = MyBlankFixationData, fixationDist = MyFixationDist, timeBins = MyTimeBins)\n\nSimData = ADDM.simulate_data(MyModel, MyStims, ADDM.aDDM_simulate_trial, MyArgs)","category":"page"},{"location":"tutorials/getting_started/#Recover-parameters","page":"Getting started with ADDM.jl","title":"Recover parameters","text":"","category":"section"},{"location":"tutorials/getting_started/","page":"Getting started with ADDM.jl","title":"Getting started with ADDM.jl","text":"Option 1: Grid Search","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with ADDM.jl","title":"Getting started with ADDM.jl","text":"ffn = \"./data/addm_grid.csv\"\ntmp = DataFrame(CSV.File(fn, delim=\",\"))\nparam_grid = Dict(pairs(NamedTuple.(eachrow(tmp))))\n\nbest_pars, all_nll_df = ADDM.grid_search(SimData, ADDM.aDDM_get_trial_likelihood, param_grid, Dict(:η=>0.0, :barrier=>1, :decay=>0, :nonDecisionTime=>100, :bias=>0.0))","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with ADDM.jl","title":"Getting started with ADDM.jl","text":"Option 2: Narrow in from starting points","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started with ADDM.jl","title":"Getting started with ADDM.jl","text":"TBD","category":"page"},{"location":"tutorials/getting_started/#Parameter-recovery-on-empirical-data","page":"Getting started with ADDM.jl","title":"Parameter recovery on empirical data","text":"","category":"section"},{"location":"tutorials/getting_started/","page":"Getting started with ADDM.jl","title":"Getting started with ADDM.jl","text":"TBD","category":"page"},{"location":"tutorials/getting_started/#Visualizations","page":"Getting started with ADDM.jl","title":"Visualizations","text":"","category":"section"},{"location":"tutorials/getting_started/#Marginal-posteriors","page":"Getting started with ADDM.jl","title":"Marginal posteriors","text":"","category":"section"},{"location":"tutorials/getting_started/","page":"Getting started with ADDM.jl","title":"Getting started with ADDM.jl","text":"TBD","category":"page"},{"location":"tutorials/getting_started/#True-vs.-simulated-data","page":"Getting started with ADDM.jl","title":"True vs. simulated data","text":"","category":"section"},{"location":"tutorials/getting_started/","page":"Getting started with ADDM.jl","title":"Getting started with ADDM.jl","text":"TBD","category":"page"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"[Add build status badges]","category":"page"},{"location":"","page":"Home","title":"Home","text":"Welcome to ADDM.jl, a package for  joint modeling of response times, eyetracking data and choice behavior using evidence accummulations models with time-varying drift rates. ","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#Currently","page":"Home","title":"Currently","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Github","category":"page"},{"location":"","page":"Home","title":"Home","text":"Fork Github repo\nClone Github repo","category":"page"},{"location":"","page":"Home","title":"Home","text":"Docker","category":"page"},{"location":"","page":"Home","title":"Home","text":"Install Docker Desktop\ndocker pull ...","category":"page"},{"location":"#Soon","page":"Home","title":"Soon","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install ADDM.jl from the Julia Registry","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> import Pkg\n\njulia> Pkg.add(\"ADDM\")","category":"page"},{"location":"#License","page":"Home","title":"License","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ADDM.jl is licensed under the GNU General Public License v3.0.","category":"page"},{"location":"#Resources-for-getting-started","page":"Home","title":"Resources for getting started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"There are a few ways to get started with ADDM.jl:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Become familiar with the modeling framework described in Krajbich et al. (2010)  \nBecome familiar with algorithm used for parameter estimation Tavares et al. (2017)  \nRead the introductory tutorial ...","category":"page"},{"location":"#Getting-help","page":"Home","title":"Getting help","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you need help, please open a GitHub issue.","category":"page"},{"location":"#How-the-documentation-is-structured","page":"Home","title":"How the documentation is structured","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Tutorials contains step-by-step explanations of how to use ADDM.jl. Once you've got ADDM.jl installed, start by reading ...\nExamples contain worked examples of various problems solved using ADDM.jl.\nThe API Reference contains a complete list of the functions you can use in ADDM.jl. Look here if you want to know how to use a particular function.","category":"page"},{"location":"#Citing-ADDM.jl","page":"Home","title":"Citing ADDM.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you use ADDM.jl, we ask that you please cite the following:","category":"page"}]
}
